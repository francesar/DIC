type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACK
  | RBRACK
  | COLON
  | PLUS
  | MINUS
  | TIMES
  | TIMES_M
  | DIVIDE
  | DIVIDE_M
  | ASSIGN
  | MOD
  | TRANSPOSE
  | INVERSE
  | CHAN
  | DOT
  | INC
  | DEC
  | NOT
  | EQ
  | PEQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | NULL
  | FUNC
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | LIST
  | DICT
  | STRING
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"

open Ast
# 64 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* COLON *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* TIMES_M *);
  270 (* DIVIDE *);
  271 (* DIVIDE_M *);
  272 (* ASSIGN *);
  273 (* MOD *);
  274 (* TRANSPOSE *);
  275 (* INVERSE *);
  276 (* CHAN *);
  277 (* DOT *);
  278 (* INC *);
  279 (* DEC *);
  280 (* NOT *);
  281 (* EQ *);
  282 (* PEQ *);
  283 (* NEQ *);
  284 (* LT *);
  285 (* LEQ *);
  286 (* GT *);
  287 (* GEQ *);
  288 (* TRUE *);
  289 (* FALSE *);
  290 (* AND *);
  291 (* OR *);
  292 (* NULL *);
  293 (* FUNC *);
  294 (* RETURN *);
  295 (* IF *);
  296 (* ELSE *);
  297 (* FOR *);
  298 (* WHILE *);
  299 (* INT *);
  300 (* BOOL *);
  301 (* FLOAT *);
  302 (* VOID *);
  303 (* LIST *);
  304 (* DICT *);
  305 (* STRING *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* LITERAL *);
  307 (* BLIT *);
  308 (* ID *);
  309 (* FLIT *);
  310 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\007\000\007\000\
\003\000\008\000\008\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\012\000\012\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\014\000\
\015\000\015\000\013\000\013\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\010\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\000\000\002\000\002\000\003\000\003\000\005\000\007\000\
\009\000\005\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\004\000\003\000\001\000\
\001\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\069\000\000\000\000\000\010\000\011\000\012\000\
\013\000\014\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\015\000\000\000\000\000\009\000\016\000\000\000\000\000\
\018\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\032\000\000\000\000\000\000\000\000\000\029\000\
\000\000\030\000\033\000\019\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\053\000\059\000\060\000\054\000\055\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\022\000\035\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\026\000\000\000\000\000\024\000\000\000\000\000\025\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\021\000\028\000\031\000\
\022\000\052\000\053\000\067\000\057\000\058\000\059\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\001\000\079\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\206\254\222\254\025\255\
\021\255\000\000\079\255\237\254\059\255\057\255\000\000\063\255\
\079\255\000\000\028\255\079\255\000\000\000\000\064\255\054\000\
\000\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\054\000\075\255\087\255\089\255\000\000\
\012\255\000\000\000\000\000\000\230\255\031\002\108\255\115\002\
\022\255\000\000\088\255\000\000\000\000\000\000\000\000\000\000\
\000\000\115\002\103\255\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\000\000\000\000\000\000\054\000\
\054\000\000\000\060\002\106\255\089\002\105\255\115\002\121\255\
\121\255\254\254\254\254\254\254\254\254\254\254\254\254\188\002\
\188\002\188\002\210\002\210\002\210\002\210\002\166\002\141\002\
\000\000\115\002\010\000\054\000\010\000\000\000\069\255\073\001\
\000\000\010\000\054\000\000\000\117\255\010\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\118\255\000\000\000\000\126\255\000\000\000\000\
\000\000\000\000\000\000\152\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\255\000\000\000\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\174\255\
\000\000\000\000\070\255\000\000\000\000\000\000\000\000\000\000\
\000\000\010\255\000\000\000\000\110\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\255\108\001\
\119\001\123\000\158\000\193\000\228\000\007\001\042\001\246\001\
\250\001\005\002\154\001\165\001\200\001\211\001\016\255\026\255\
\000\000\218\255\000\000\000\000\000\000\000\000\196\255\000\000\
\000\000\000\000\134\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\111\000\000\000\065\000\000\000\000\000\112\000\
\000\000\207\255\224\255\197\255\000\000\201\255\000\000"

let yytablesize = 1001
let yytable = "\054\000\
\011\000\016\000\056\000\060\000\061\000\062\000\063\000\064\000\
\065\000\100\000\028\000\066\000\028\000\071\000\001\000\102\000\
\051\000\017\000\051\000\082\000\083\000\051\000\019\000\051\000\
\051\000\018\000\052\000\072\000\052\000\095\000\096\000\052\000\
\023\000\052\000\052\000\099\000\066\000\101\000\056\000\103\000\
\121\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\051\000\051\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\052\000\024\000\025\000\056\000\
\122\000\032\000\026\000\033\000\034\000\015\000\035\000\133\000\
\064\000\127\000\036\000\129\000\068\000\064\000\064\000\029\000\
\132\000\037\000\038\000\020\000\135\000\039\000\040\000\041\000\
\069\000\027\000\070\000\128\000\061\000\097\000\061\000\042\000\
\043\000\061\000\066\000\061\000\061\000\044\000\045\000\098\000\
\046\000\047\000\124\000\126\000\130\000\032\000\027\000\033\000\
\094\000\048\000\035\000\049\000\050\000\051\000\036\000\134\000\
\006\000\006\000\007\000\008\000\009\000\037\000\038\000\010\000\
\007\000\039\000\040\000\041\000\076\000\077\000\078\000\079\000\
\027\000\080\000\030\000\042\000\043\000\081\000\082\000\083\000\
\055\000\044\000\045\000\000\000\046\000\047\000\000\000\000\000\
\000\000\018\000\000\000\018\000\018\000\048\000\018\000\049\000\
\050\000\051\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\000\000\000\000\018\000\018\000\018\000\
\065\000\000\000\000\000\065\000\000\000\065\000\065\000\018\000\
\018\000\000\000\000\000\000\000\000\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\000\000\023\000\000\000\023\000\
\023\000\018\000\023\000\018\000\018\000\018\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\023\000\000\000\
\000\000\023\000\023\000\023\000\066\000\000\000\000\000\066\000\
\000\000\066\000\066\000\023\000\023\000\000\000\073\000\000\000\
\000\000\023\000\023\000\000\000\023\000\023\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\023\000\080\000\023\000\
\023\000\023\000\081\000\082\000\083\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\000\000\000\000\091\000\
\092\000\000\000\000\000\032\000\000\000\033\000\000\000\000\000\
\035\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\038\000\000\000\000\000\039\000\
\040\000\041\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\042\000\043\000\006\000\007\000\008\000\009\000\044\000\
\045\000\010\000\046\000\047\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\048\000\035\000\049\000\050\000\051\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\038\000\000\000\000\000\039\000\040\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\043\000\000\000\
\034\000\000\000\034\000\000\000\000\000\034\000\000\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\048\000\
\034\000\049\000\050\000\051\000\034\000\034\000\034\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
\000\000\034\000\034\000\038\000\000\000\038\000\000\000\000\000\
\038\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\000\000\038\000\038\000\039\000\000\000\
\039\000\000\000\000\000\039\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\039\000\000\000\
\000\000\000\000\039\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\039\000\
\039\000\041\000\000\000\041\000\000\000\000\000\041\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\041\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\041\000\041\000\042\000\000\000\042\000\000\000\
\000\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\042\000\042\000\043\000\
\000\000\043\000\000\000\000\000\043\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\000\000\
\043\000\043\000\040\000\000\000\040\000\000\000\000\000\040\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\040\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\131\000\000\000\040\000\040\000\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\000\000\080\000\000\000\000\000\000\000\081\000\082\000\083\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\000\000\000\000\091\000\092\000\036\000\000\000\036\000\000\000\
\000\000\036\000\000\000\036\000\036\000\036\000\036\000\037\000\
\000\000\037\000\000\000\000\000\037\000\000\000\037\000\037\000\
\037\000\037\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\000\000\000\000\036\000\036\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\037\000\037\000\047\000\000\000\047\000\000\000\000\000\047\000\
\000\000\047\000\047\000\000\000\000\000\048\000\000\000\048\000\
\000\000\000\000\048\000\000\000\048\000\048\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\047\000\047\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\048\000\048\000\
\049\000\000\000\049\000\000\000\000\000\049\000\000\000\049\000\
\049\000\000\000\000\000\050\000\000\000\050\000\000\000\000\000\
\050\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\049\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\044\000\000\000\
\044\000\000\000\045\000\044\000\045\000\044\000\044\000\045\000\
\000\000\045\000\045\000\000\000\000\000\046\000\000\000\046\000\
\000\000\000\000\046\000\000\000\046\000\046\000\044\000\044\000\
\044\000\000\000\045\000\045\000\045\000\000\000\000\000\044\000\
\044\000\000\000\000\000\045\000\045\000\046\000\046\000\046\000\
\000\000\093\000\000\000\000\000\000\000\000\000\046\000\046\000\
\074\000\075\000\076\000\077\000\078\000\079\000\000\000\080\000\
\000\000\000\000\000\000\081\000\082\000\083\000\000\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\123\000\000\000\
\091\000\092\000\000\000\000\000\000\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\080\000\000\000\000\000\000\000\
\081\000\082\000\083\000\000\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\125\000\000\000\091\000\092\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\000\000\080\000\000\000\000\000\000\000\081\000\082\000\083\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\000\000\000\000\091\000\092\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\080\000\000\000\000\000\000\000\081\000\
\082\000\083\000\000\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\091\000\092\000\074\000\075\000\
\076\000\077\000\078\000\079\000\000\000\080\000\000\000\000\000\
\000\000\081\000\082\000\083\000\000\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\000\000\000\000\091\000\074\000\
\075\000\076\000\077\000\078\000\079\000\000\000\080\000\000\000\
\000\000\000\000\081\000\082\000\083\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\080\000\000\000\000\000\000\000\
\081\000\082\000\083\000\000\000\000\000\000\000\000\000\087\000\
\088\000\089\000\090\000\074\000\075\000\076\000\077\000\078\000\
\079\000\000\000\080\000\000\000\000\000\000\000\081\000\082\000\
\083\000"

let yycheck = "\032\000\
\000\000\052\001\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\069\000\001\001\044\000\003\001\002\001\001\000\071\000\
\001\001\052\001\003\001\022\001\023\001\006\001\002\001\008\001\
\009\001\001\001\001\001\016\001\003\001\008\001\009\001\006\001\
\052\001\008\001\009\001\068\000\069\000\070\000\071\000\072\000\
\096\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\034\001\035\001\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\035\001\003\001\006\001\096\000\
\097\000\002\001\004\001\004\001\005\001\005\000\007\001\131\000\
\003\001\123\000\011\001\125\000\002\001\008\001\009\001\052\001\
\130\000\018\001\019\001\019\000\134\000\022\001\023\001\024\001\
\002\001\025\000\002\001\124\000\001\001\006\001\003\001\032\001\
\033\001\006\001\131\000\008\001\009\001\038\001\039\001\001\001\
\041\001\042\001\001\001\003\001\040\001\002\001\001\001\004\001\
\005\001\050\001\007\001\052\001\053\001\054\001\011\001\003\001\
\003\001\043\001\044\001\045\001\046\001\018\001\019\001\049\001\
\003\001\022\001\023\001\024\001\012\001\013\001\014\001\015\001\
\003\001\017\001\028\000\032\001\033\001\021\001\022\001\023\001\
\033\000\038\001\039\001\255\255\041\001\042\001\255\255\255\255\
\255\255\002\001\255\255\004\001\005\001\050\001\007\001\052\001\
\053\001\054\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\003\001\255\255\255\255\006\001\255\255\008\001\009\001\032\001\
\033\001\255\255\255\255\255\255\255\255\038\001\039\001\255\255\
\041\001\042\001\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\050\001\007\001\052\001\053\001\054\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\003\001\255\255\255\255\006\001\
\255\255\008\001\009\001\032\001\033\001\255\255\001\001\255\255\
\255\255\038\001\039\001\255\255\041\001\042\001\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\050\001\017\001\052\001\
\053\001\054\001\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\034\001\
\035\001\255\255\255\255\002\001\255\255\004\001\255\255\255\255\
\007\001\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\255\255\255\255\255\255\037\001\255\255\255\255\
\255\255\032\001\033\001\043\001\044\001\045\001\046\001\038\001\
\039\001\049\001\041\001\042\001\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\050\001\007\001\052\001\053\001\054\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\050\001\
\017\001\052\001\053\001\054\001\021\001\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\034\001\035\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\034\001\035\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\034\001\
\035\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\034\001\035\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\034\001\035\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\001\001\255\255\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\034\001\035\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\034\001\035\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\008\001\009\001\255\255\255\255\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\034\001\035\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\034\001\035\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\009\001\255\255\255\255\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\034\001\035\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\034\001\035\001\001\001\255\255\
\003\001\255\255\001\001\006\001\003\001\008\001\009\001\006\001\
\255\255\008\001\009\001\255\255\255\255\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\025\001\026\001\
\027\001\255\255\025\001\026\001\027\001\255\255\255\255\034\001\
\035\001\255\255\255\255\034\001\035\001\025\001\026\001\027\001\
\255\255\003\001\255\255\255\255\255\255\255\255\034\001\035\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\255\255\255\255\255\255\021\001\022\001\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\003\001\255\255\
\034\001\035\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\003\001\255\255\034\001\035\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\034\001\035\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\034\001\035\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\034\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACK\000\
  RBRACK\000\
  COLON\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  TIMES_M\000\
  DIVIDE\000\
  DIVIDE_M\000\
  ASSIGN\000\
  MOD\000\
  TRANSPOSE\000\
  INVERSE\000\
  CHAN\000\
  DOT\000\
  INC\000\
  DEC\000\
  NOT\000\
  EQ\000\
  PEQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NULL\000\
  FUNC\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  LIST\000\
  DICT\000\
  STRING\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 44 "parser.mly"
              ( _1 )
# 538 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
               ( ([], [])					)
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 53 "parser.mly"
               ( ((_2 :: fst _1), snd _1)	)
# 552 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 54 "parser.mly"
               ( (fst _1, (_2 :: snd _1))	)
# 560 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 58 "parser.mly"
  ( { typ = _2;
			fname = _3;
			formals = _5;
			locals = List.rev _8;
			body = List.rev _9})
# 575 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
               ( [] )
# 581 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 66 "parser.mly"
               ( List.rev _1 )
# 588 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
          ( [(_1, _2)]				)
# 596 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
                            ( (_3, _4) :: _1 )
# 605 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
        ( Int 	)
# 611 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
         ( Bool 	)
# 617 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
         ( Float )
# 623 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
         ( Void 	)
# 629 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
           ( String )
# 635 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                ([])
# 641 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 81 "parser.mly"
                    ( _2 :: _1 )
# 649 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 84 "parser.mly"
             (	(_1, _2))
# 657 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
               ( [] )
# 663 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                  ( _2 :: _1 )
# 671 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                        ( Expr _1				  		)
# 678 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 92 "parser.mly"
                             ( Return _2						)
# 685 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 93 "parser.mly"
                               ( Block(List.rev _2)	)
# 692 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 700 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                                          ( If(_3, _5, _7)		)
# 709 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parser.mly"
            ( For(_3, _5, _7, _9)	)
# 719 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
                                    ( While(_3, _5)			)
# 727 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
               ( Noexpr )
# 733 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
           ( _1 )
# 740 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 105 "parser.mly"
                    ( Literal(_1)            )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                   ( Fliteral(_1)           )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
               ( BoolLit(true)					)
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
               ( BoolLit(false)					)
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                 ( StringLit(_1)					)
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                    ( Id(_1)                 )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rows) in
    Obj.repr(
# 111 "parser.mly"
                      ( MatLit(_2)						)
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                    ( Binop(_1, Add,   _3)   )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                    ( Binop(_1, Sub,   _3)   )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                    ( Binop(_1, Mult,  _3)   )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Mult_M, _3) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                    ( Binop(_1, Dot_M, _3)	)
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                    ( Binop(_1, Div,   _3)   )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                      ( Binop(_1, Div_M, _3) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                   ( Binop(_1, Mod,   _3) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                    ( Binop(_1, Eq,    _3)   )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                   ( Binop(_1, Peq,   _3) )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                    ( Binop(_1, Neq,   _3)   )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    ( Binop(_1, Less,  _3)   )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                    ( Binop(_1, Leq,   _3)   )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                    ( Binop(_1, Geq,   _3)   )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                    ( Binop(_1, And,   _3)   )
# 915 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                    ( Binop(_1, Or,    _3)   )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                        ( Unop(Neg, _2)      )
# 930 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
               ( Unop(Increment, _2) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Unop(Decrement, _2) )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                 ( Punop(_1, Increment)      )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
              ( Punop( _1, Decrement))
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                    ( Unop(Not, _2)          )
# 965 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                    ( Unop(Trans_M, _2)			)
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                   ( Unop(Inv_M, _2)        )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                    (  Assign(_1, _3)        )
# 987 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 140 "parser.mly"
                             ( Call(_1, _3)  )
# 995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                      ( _2                   )
# 1002 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 145 "parser.mly"
             ( List.rev _1 )
# 1009 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
             ( [_1] )
# 1016 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                           ( _3 :: _1 )
# 1024 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_opt) in
    Obj.repr(
# 152 "parser.mly"
               ([_1])
# 1031 "parser.ml"
               : 'rows))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rows) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args_opt) in
    Obj.repr(
# 153 "parser.mly"
                        (_3 :: _1)
# 1039 "parser.ml"
               : 'rows))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
